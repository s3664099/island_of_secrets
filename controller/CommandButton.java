/*
Title: Island of Secrets Command Button
Author: Jenny Tyler & Les Howarth
Translator: David Sarkies
Version: 4.5
Date: 17 September 2025
Source: https://archive.org/details/island-of-secrets_202303
*/

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Represents a button in the game's GUI that triggers a specific command
 * when clicked. This class acts as a bridge between the button and the
 * {@link GameController}, sending the associated command for processing.
 * 
 * <p>Example usage:</p>
 * <pre>
 * JButton moveButton = new JButton("Move");
 * moveButton.addActionListener(new CommandButton(controller, "move north"));
 * </pre>
 * 
 * <p>This class ensures that null commands or controllers cannot be provided,
 * and it prevents empty commands from being sent to the controller.</p>
 */
public class CommandButton implements ActionListener {

    /**
     * The command to send to the {@link GameController} when this button is clicked.
     */
	private final String command;

    /**
     * The game controller responsible for handling commands.
     */
	private final GameController controller;
	
    /**
     * Constructs a new {@link CommandButton} with the specified controller and command.
     *
     * @param controller the {@link GameController} that will process the command; must not be null
     * @param command the command string associated with this button; must not be null
     * @throws NullPointerException if {@code controller} or {@code command} is null
     */
	public CommandButton(GameController controller, String command) {
		
		this.command = Objects.requireNonNull(command,"Command cannot be null");
		this.controller = Objects.requireNonNull(controller,"Controller cannot be null");	
	}
	
    /**
     * Invoked when the button is clicked. If the command is non-empty, it is
     * sent to the controller for processing.
     *
     * @param event the {@link ActionEvent} generated by the button click
     */
	@Override
	public void actionPerformed(ActionEvent event) {
		if(shouldProcessCommand()) {
			processCommand();
		}
	}
	
    /**
     * Determines if the command is valid and should be processed.
     * Currently, this only checks that the command is not blank.
     *
     * @return {@code true} if the command is non-empty; {@code false} otherwise
     */
	private boolean shouldProcessCommand() {
		return !command.trim().isEmpty();
	}
	
    /**
     * Sends the command to the {@link GameController} for processing.
     * Any {@link IOException} encountered is logged.
     */
	private void processCommand() {
		try {
			controller.processCommand(command);
		} catch (IOException e) {
			handleCommandError(e);
		}
	}
	
    /**
     * Handles any {@link IOException} thrown during command processing
     * by logging it using Java's {@link Logger}.
     *
     * @param e the exception encountered while processing the command
     */
	private void handleCommandError(IOException e) {
		Logger.getLogger(CommandButton.class.getName())
        .log(Level.SEVERE, "Command processing error", e);		
	}

}

/* 25 February 2025 - Created Class
 * 5 March 2025 - Increased version to v4.0
 * 22 March 2025 - Added Error Handling
 * 31 March 2025 - Removed panel from process command
 * 1 April 2024 - Updated listener
 * 21 April 2025 - Updated class based on recommendations by DeepSeek
 * 17 September 2025 - Added JavaDocs
 */
