



**** Test the special items that the rules in SpecialItemHandler work
		ROOM_CLEARING			-	A tree bristling with apples
		ROOM_ENTRANCE_CHAMBER	-	A torch hanging in a bracket on the wall - Show/Hide
		ROOM_GRANDPAS_SHACK		-	A coffee table against the wall, an open oak chest - Chest closed/Open
		ROOM_PYRAMID_SPLIT		-	A piece of flint stuck in the crack - Show/Hide
		ROOM_OUTSIDE_HUT		-	A map, along with a collection of papers which seem to make up a diary - Show/Hide
		ROOM_LAIR				-	A parchment stuck amongst the mushrooms - Show/Hide

**** Make sure the special exits are correct
	    ROOM_STOREROOM		-	There is a door to the east
	    ROOM_CAVE			-	You can also go west into the cave
	    ROOM_BUILDING		-	You can also go west into the hut
	    ROOM_CLEARING		-	You can also go west into the hut
	    ROOM_ABODE_HUT		-	You can also go north into the hut
	    ROOM_CASTLE_WALL	- 	You can also go north into the portal
	    ROOM_LAIR			-	You can also go east out of the lair
	    ROOM_HUT			-	You can also go north out of the hut
	    ROOM_LOGMAN_HUT		-	You can also go north out of the cabin
	    ROOM_PYRAMID_ROOF	-	You can also go north down of the pyramid
	    ROOM_OUTSIDE_HUT	-	You can go south out of the hut
	    ROOM_PYRAMID_STEP	-	You can also go south up the pyramid
	    ROOM_GRANDPAS_SHACK	-	You can go east out of the shack
	    ROOM_LOGMAN_HALL	-	You can go east out of the hall
	    ROOM_STOREROOM		-	Trapdoor - See Below for issue
	    					- 	HandleGoTrapdoor looks odd in CommandValidator

- Combat
	- Chop Roots - Only With Axe
	- Chop Column - Only with Hammer
	- Chop Person
	- Break Staff
	- Attack
		- Omegan
		- Swampman
		- Sage
		- Logman
		- Dactyl
		- Flint
	- Carrying Weapon
		- Axe
		- Hammer
	- Tap Person - Make sure that it falls into the categories
	
- Consume
	- Eat & Eat Food
	- Apple
	- Lillies
	- Falls outside Food
	- Have no food
	- Drink
	- liquid
	- Falls outside drink
	- have no drink
	- Rest
	- Rest when storm appears

- Examine
	- Parchment
	- Closed Chest
	- Open Chest
	- Table
	- Column
	- Room
	- Map
	- Papers
	- Clues

- Items
	- Take
		- Validate Take
		- Check not in room
		- Not valid pick
		- not valid catch
		- Are Apples
		- Are No Apples
		- Is no torch
		- is food
		- take drink
		- take cloak
		- take egg
		- take books
		- take beast failed
	- Drop
		- Validate Carrying
		- drop jug
		- drop torch
		- release beast
	- Give
		- Validate Give
		- Give when subject not present - it is refused, should respond otherwise
		- is snake,
		- is villager
		- is swampman
		- is logmen
		- is scavenger
		- is median

- Miscellaneous
	- info
	- wave - torch & boatman
	- help - sage & villager
	- polish
	- speak
	- fill - jug water & slime
	- ride - beast & already riding
	- open - Chest & trapdoor
	- swim - can & cannot
	- shelter - storm - cave, hut, grandpa
	
- Move
	- Normal
	- Special
		- CODE_IN_LAIR
		- CODE_IN_LOG_HUT
		- CODE_IN_SHACK
		- CODE_IN_ABODE_HUT
		- CODE_IN_PORTAL
		- CODE_OUT_LAIR
		- CODE_OUT_LOG_HUT
		- CODE_OUT_LOG_CABIN
		- CODE_DOWN_PYRAMID
		- CODE_DOWN_TRAPDOOR
		- CODE_OUT_ABODE_HUT
		- CODE_UP_PYRAMID
		- CODE_OUT_SHACK
		- CODE_OUT_HALL
		- ROOM_CAVE && noun.equals("cave"))
		- ROOM_CLEARING && noun.equals("hut")
		- ROOM_BUILDING && noun.equals("hut")
			nounNumber = GameEntities.WEST;
		- ROOM_ABODE_HUT && noun.equals("hut")
			nounNumber=GameEntities.NORTH;
	- Blocked
		- (isOmeganPresent(game,player)) game.addMessage("Omegan's presence prevents you from leaving!",true,true);
			result = new ActionResult(game,player,true);
		- (isSwampmanPresent(game,player,command)) {
			game.addMessage("He will not let you pass.",true,true);
		- (areRocksMoving(game,player)) {
			game.addMessage("The rocks move to prevent you",true,true);
			result = new ActionResult(game,player,true);
		- (doArmsHoldYou(game,player)) {
			game.addMessage("The arms hold you fast",true,true);
			result = new ActionResult(game,player,true);
		- (isSnakePresent(game,player,command)) {
			game.addMessage("Hisss!",true,true);
			result = new ActionResult(game,player,true);
		- (isPlayerRidingBeast(game,player,command)) {
			game.addMessage("Too steep to climb",true,true);
			result = new ActionResult(game,player,true);
		- (isDoorClosed(player,command)) {
			game.addMessage("The door is barred!",true,true);
	- Entry Effects
		- (isInHandsRoom(game,player)) {
			game.addMessage("You enter the room and giant hands grab you and hold you fast",false,true);
		- (player.getRoom()==GameEntities.ROOM_WITH_HANDS) {
			game.addMessage("You enter the room and brightly shining torch force the arms to retreat to the walls",false,true);
		- (isInEntranceHall(player,command)) {
			game.addMessage("The doors slam shut behind you preventing you from leaving",false,true);
		- (isOnJetty(game,player)) {
			game.getItem(16).setItemLocation(rand.nextInt(4)+1);
			game.getItem(16).setItemFlag(0);
			game.addMessage("The beast runs away",false,true);
		- Game does not end if go boat

**** Test if can complete game
**** Test Each of the sections to see if they work

- Redo the Panels

- Add Accessiblity Warning with flashing light
- Add Flag (noted) that will just to a normal message
- Add option that if emoji's not available to just do normal




















TRAPDOOR ISSUE IDENTIFIED:
Operator Precedence Bug ⚠️

return (command.getCodedCommand().equals(GameEntities.CODE_DOWN_TRAPDOOR) ||
        command.getCodedCommand().equals(GameEntities.CODE_ENTER_TRAPDOOR) &&
        (game.getItem(GameEntities.ITEM_TRAPDOOR).getItemFlag()==1));


Because && binds more tightly than ||, this is evaluated as:

(CODE_DOWN_TRAPDOOR) || (CODE_ENTER_TRAPDOOR && trapdoorClosed)


which is not what you intend. You want parentheses around the ||:

return (command.getCodedCommand().equals(GameEntities.CODE_DOWN_TRAPDOOR) ||
        command.getCodedCommand().equals(GameEntities.CODE_ENTER_TRAPDOOR)) &&
        game.getItem(GameEntities.ITEM_TRAPDOOR).getItemFlag() == 1;


Same issue in checkGoTrapdoorOpen.

