default
  - *Start
  - *Main
command_process
  - *ActionResult
  - *CommandExecutor
  - *CommandParser
  - *CommandProcessor
  - *CommandValidator
  - *ParsedCommand  
commands
  - *Combat
  - *Consume
  - *Examine
  - *ItemCommands
  - *Miscellaneous
  - *Move
controller
  - *BookButton
  - *CommandButton
  - *CommandListener
  - *GameButton
  - *MapButton
  - *MapController
  - *QuitButton
  - *SearchGameButton
  - *ShelterButton
data
  - Constants
  - GameEntities
  - Item
  - Location
  - RawData
game
  - Game
  - *GameEngine
  - *GameInitialiser
  - *MessageBuilder
  - *Player
  - *RandomExitHandler
  - *SpecialExitHandler
  - *SpecialItemHandler
  - *PostCommand
  - *Swimming
  - *SwimmingHandler
interfaces
  - GameCommandHandler
  - GameStateProvider
  - GameUI
  - GameView
persistence
  - *Persistence
ui
  - GameState
  - *GameController
view
  - CommandPanel
  - GameFrame
  - GamePanel
  - LightningPanel
  - MainGamePanel
  - MapPanel
  - MessagePanel
  - RoomPanel
  - StatusPanel
  

**** Test the special items that the rules in SpecialItemHandler work
**** Make sure the special exits are correct

- Give when subject not present - it is refused, should respond otherwise
- See Below for issue with Trapdoor
- HandleGoTrapdoor looks odd in CommandValidator
- Game does not end if go boat















Redo the Panels



### **7. `View`**

* After you understand how state and interaction are managed, look at UI rendering.
* CommandPanel','MapPanel','MessagePanel','LightningPane' etc. define the game's display.

### **8. `UISupport`**

* Likely cross-cutting utility classes like `GameState`

### **9. `Data`**

* **Constants**: Should be reviewed early and used consistently.
* **RawData**: Source of level/item data‚Äîdeserves cleanup & docs.
* **GameEntities**, `Location`, `Item`: Part of core model‚Äîdocument field meanings.

---

## üõ†Ô∏è **Minor Polishing Suggestions**

### **1. Add Logging**

Use `java.util.logging.Logger` or `slf4j` with `logback` for consistency.

Examples:

```java
private static final Logger LOGGER = Logger.getLogger(GameEngine.class.getName());
LOGGER.info("Game initialized successfully.");
LOGGER.warning("Invalid command received: " + command);
```

### **2. Add Javadoc Comments**

Start with:

* All public classes/interfaces
* All public methods (especially in `Commands`, `Game`, `GameEngine`, and `GamePanel`)
* All model/entity fields

Example:

```java
/**
 * Parses and validates user commands before execution.
 */
public class CommandParser {
    /**
     * Parses a raw command string into a ParsedCommand object.
     *
     * @param input Raw user input
     * @return ParsedCommand object containing verb and noun
     */
    public ParsedCommand parse(String input) { ... }
}
```

### **3. Miscellaneous Cleanup**

* Remove commented-out `System.out.println` lines or replace with logs.
* Move any magic numbers to `Constants`.
* Add `.gitignore` if not already present (ignore `bin/`, `.class`, `*.log`, etc.).
* Check for repeated UI layout logic‚Äîconsider abstracting repeated code.

---

Would you like me to generate a `README.md` template based on this structure? I can tailor it to:

* Explain your module layout
* Provide build/run instructions
* Include contribution/dev guidelines if relevant

TRAPDOOR ISSUE IDENTIFIED:
Operator Precedence Bug ‚ö†Ô∏è

return (command.getCodedCommand().equals(GameEntities.CODE_DOWN_TRAPDOOR) ||
        command.getCodedCommand().equals(GameEntities.CODE_ENTER_TRAPDOOR) &&
        (game.getItem(GameEntities.ITEM_TRAPDOOR).getItemFlag()==1));


Because && binds more tightly than ||, this is evaluated as:

(CODE_DOWN_TRAPDOOR) || (CODE_ENTER_TRAPDOOR && trapdoorClosed)


which is not what you intend. You want parentheses around the ||:

return (command.getCodedCommand().equals(GameEntities.CODE_DOWN_TRAPDOOR) ||
        command.getCodedCommand().equals(GameEntities.CODE_ENTER_TRAPDOOR)) &&
        game.getItem(GameEntities.ITEM_TRAPDOOR).getItemFlag() == 1;


Same issue in checkGoTrapdoorOpen.

